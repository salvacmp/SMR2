def main():
  modbus_add_signal("192.168.0.5", 255, 16, 3, "MODBUS_1")
  modbus_set_signal_update_frequency("MODBUS_1", 10)
  modbus_add_signal("192.168.0.5", 255, 129, 3, "MODBUS_2")
  modbus_set_signal_update_frequency("MODBUS_2", 10)
  modbus_add_signal("192.168.0.5", 255, 130, 3, "MODBUS_3")
  modbus_set_signal_update_frequency("MODBUS_3", 10)
  set_analog_inputrange(0, 0)
  set_analog_inputrange(1, 0)
  set_analog_inputrange(2, 0)
  set_analog_inputrange(3, 0)
  set_analog_outputdomain(0, 1)
  set_analog_outputdomain(1, 1)
  set_tool_voltage(0)
  set_runstate_outputs([])
  modbus_set_runstate_dependent_choice("MODBUS_1",0)
  modbus_set_runstate_dependent_choice("MODBUS_2",0)
  modbus_set_runstate_dependent_choice("MODBUS_3",0)
  set_payload(0.75)
  set_gravity([0.0, 0.0, 9.82])
  while (True):
    $ 1 "Robot Program"
    
    textmsg(get_actual_joint_positions())
    textmsg("-0-0-0-0-0-0-0-0-0-0-0-0")
    textmsg(get_actual_tcp_pose())
    #p[x,y,z,rx,ry,rz]
    #p[-0.462159, -0.111087, 0.0418912, -0.275724, -3.12572, 0.109085]
    #callibration_point = p[-0.462159, -0.111087, 0.2, -0.275724, -3.12572, 0.109085]
    #movel(callibration_point, a=0.5, v=0.05, r=0)
    bottom_left = p[-0.464567, -0.37354, 0.1, -2.16042, -2.26419, 0.0197251] 
    bottom_right = p[-0.458792, -0.605187, 0.1, -2.16042, -2.26419, 0.0197251]
    top_right = p[-0.029369, -0.611195, 0.1, -2.16042, -2.26419, 0.0197251]
    top_left = p[-0.030541, -0.372615, 0.1, -2.16042, -2.26419, 0.0197251]
    home = p[-0.573176, 0.146852, 0.462849, -2.16042, -2.26419, 0]
    
    
    #+0.0899 tool offset
    popup("Start Homing", blocking=True)
    movel(home)
    current_joint = get_actual_joint_positions()
    current_joint[5] = 0
    movej(current_joint)
    popup("Moving", blocking=True)
    #movel(bottom_right, a=0.5, v=0.05, r=0)
    #movel(top_right, a=0.5, v=0.05, r=0)
    #movel(top_left, a=0.5, v=0.05, r=0)
    #movel(bottom_left, a=0.5, v=0.05, r=0)
    socket_open("192.168.0.200", 2025, "cam_socket")
    sleep(1)
    socket_send_int(99991,"cam_socket") #"req_cam_total"
    sleep(3)
    totalPoints = socket_read_ascii_float(1,"cam_socket")
    textmsg(totalPoints[1])
    socket_close("cam_socket")
    socket_open("192.168.0.200", 2025, "cam_socket")
    sleep(1)
    
    def angleToAA(Angle):
      arad = d2r(Angle + 6) #is Angle radians
      rx = cos(0.5*arad)*3.14
      ry = sin(0.5*arad)*3.14
      return p[0,0,0,rx,ry,0]
    end
    x = 0
    while x < totalPoints[1]:
        textmsg(x)
        textmsg(totalPoints)
        socket_send_int(x,"cam_socket")
        sleep(1)
        coordinates = socket_read_ascii_float(3,"cam_socket")
        textmsg(coordinates)
        distance = 0.0899
        x_offset = cos(coordinates[3]/180*3.14)* distance
        y_offset = sin(coordinates[3]/180*3.14)* distance
        textmsg("X Offset")
        textmsg(x_offset)
        textmsg("Y Offset")
        textmsg(y_offset)
        movel((p[coordinates[1], coordinates[2],0.13, -2.16042, -2.26419, 0]), a=0.5, v=0.05, r=0)
        current_pose = get_actual_tcp_pose()
        current_pose[3] = 0
        current_pose[4] = 0
        current_pose[5] = 0
    
        movel(pose_add(current_pose ,angleToAA(coordinates[3])), a=0.5, v=0.05, r=0)
        # expected_angle = get_actual_joint_positions()
        # expected_angle[5] = coordinates[3]
        # movej(expected_angle)
        sleep(1)
        x = x + 1
    
    end
    socket_close("cam_socket")
    
    $ 3 "Halt"
    halt
  end
end
