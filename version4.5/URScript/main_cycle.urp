textmsg("-0-0-0-0-0-0-0-0-0-0-0-0")
textmsg("-START OF PROGRAM_ROPAX-")
textmsg("-0-0-0-0-0-0-0-0-0-0-0-0")
textmsg(get_actual_joint_positions())
textmsg(get_actual_tcp_pose())
buffer_memory = 0

#  !! hard programmed pose coordinates p[x.y.z.rx.ry.rz] !!
# Home and transfer coordinates
home = p[-0.24004, -0.54751, 1089.15,0.0517, 3.1131, -0.00190]
home_low = p[-0.15170,-0.54741, 1.11208, -0.0646, 3.1124, -0.0174]
home_low_low = p[-0.15170,-0.54741, 1.056, -0.0646, 3.1124, -0.0174]
home_transfer = p[-0.573176, 0.146852, 0.3, -2.16042, -2.26419, 0]

# Placement coordinates for belly brick with type 1
placement = p[-0.01276, 0.58909, 0.10035, -2.2109, -0.0016, -2.2169]
placement_approach = p[-0.01276, 0.58909, 0.102, -2.2109, -0.0016, -2.2169]
placement_clearance = p[-0.03960, 0.58909, 0.102, -2.2109, -0.0016, -2.2169]

# Placement coordinates for side brick with type 2
placement_side = p[0.14054, 0.58909, 0.27888, -3.1075, -0.0584, 0.0349]
placement_side_config = p[-0.45014, 0.54481, 0.5, -3.1075, -0.0584, 0.0349]

################################################################

# Home the robot
set_digital_out(1,False)
popup("Start Homing", blocking=True)
movel(home_low_low)
home_z = 1.056
popup("Moving", blocking=True)
while buffer_memory < 15:
  
  # capture position
  movel(home_low_low)
  
  # Asking server for detection of the bricks
  socket_open("192.168.0.200", 2025, "cam_socket")
  socket_send_int(99991,"cam_socket")
  sleep(1)
  totalPoints = socket_read_ascii_float(1,"cam_socket")
  textmsg(totalPoints[1])
  
  # standby connection to the server
  socket_close("cam_socket")
  socket_open("192.168.0.200", 2025, "cam_socket")
  
  # function to convert angle to axis angle
  def angleToAA(Angle):
    arad = d2r(Angle + 3)
    rx = cos(0.5*arad)*3.14
    ry = sin(0.5*arad)*3.14
    return p[0,0,0,rx,ry,0]
  end
  
  x = 0
  while x < totalPoints[1]:
    
    # lower post-capture approach
    home_lower = home_low_low
    home_lower[2] = 0
    movel(pose_add(home_lower, p[0,0,0.601,0,0,0]), a=0.9, v=0.6, r=0)
    
    textmsg(x)
    textmsg(totalPoints)
    # get the coordinates of the brick
    socket_send_int(x,"cam_socket")
    sleep(0.5)
    coordinates = socket_read_ascii_float(5,"cam_socket")
    brick_type = coordinates[5]
    textmsg(coordinates)
    
    # move above the brick
    curr_pos = get_actual_tcp_pose()
    movel(p[coordinates[1], coordinates[2],curr_pos[2], curr_pos[3],curr_pos[4], curr_pos[5]], a=0.9, v=0.6, r=0)
    
    # rotate EoAT
    currPos = get_actual_tcp_pose()
    currPos[3] = 0
    currPos[4] = 0
    currPos[5] = 0
    movel(pose_add(currPos, angleToAA(coordinates[4])), a=0.9, v=0.6, r=0)
    
    # move to pick the brick (on Z axis)
    approach = get_actual_tcp_pose()
    approach[2] = 0
    brickz = ((home_z-(coordinates[3]))+0.05)
    textmsg(brickz)
    movel(pose_add(approach, p[0,0,brickz,0,0,0]), a=0.9, v=0.6, r=0)

    # approach the brick with force finding
    textmsg(force())
    while force() <= 70:
        current_pose = get_actual_tcp_pose()
        textmsg(force())
        movel(pose_add(current_pose, p[0,0,-0.0005,0,0,0]), a=0.1, v=0.01, r=0)
        textmsg(force())
    end
    textmsg(force())
    
    # turn on vacumm
    set_digital_out(1,True)
    sleep(0.5)

    #move up
    clearance = get_actual_tcp_pose()
    clearance[2] = 0
    movel(pose_add(clearance, p[0,0,0.7,0,0,0]), a=0.9, v=0.6, r=0)

    # move to placement point
    if brick_type == 1:
      # For the belly brick
      
      # Move to transfer position on the same height
      curr_pos = get_actual_tcp_pose()
      home_temp = home_transfer
      home_temp[2] = 0
      movel(pose_add(home_temp, p[0,0,curr_pos[2],0,0,0]), a=0.9, v=0.6, r=0)
      
      # Rotate the head to stand the brick
      movel(pose_add(placement_approach, p[((-0.055*buffer_memory)+-0.05),0,0,0,0,0]), a=0.9, v=0.6, r=0)
      
      # Turn off the vacumm
      set_digital_out(1,False)
      
      # Move to the placement point
      movel(pose_add(placement, p[(-0.055*buffer_memory),0,0,0,0,0]), a=0.9, v=0.6, r=0)
      
      # Wait for the vacumm release
      sleep(3)
      
      # small clearance to allow the brick to drop down
      movel(pose_add(placement_clearance, p[(-0.055*buffer_memory),0,0,0,0,0]), a=0.9, v=0.6, r=0)
      
      # Add clearance on X and Z axis
      curr_pos = get_actual_tcp_pose()
      movel(pose_add(curr_pos, p[-0.055,0,0.1,0,0,0]))
      
      # Move to transfer position
      movel(home_transfer, a=0.9, v=0.6, r=0)
      
    elif brick_type == 2:
      curr_pos = get_actual_tcp_pose()
      home_temp = home_transfer
      home_temp[2] = 0
      movel(pose_add(home_temp, p[0,0,curr_pos[2],0,0,0]), a=0.9, v=0.6, r=0)
      
      movel(placement_side_config, a=0.9, v=0.6, r=0)
      
      moving = get_actual_tcp_pose()
      pcs_appr = placement_side
      pcs_appr[2] = 0
      movel(pose_add(pcs_appr, p[((-0.057*buffer_memory)+-0.05),0,moving[2],0,0,0]), a=0.9, v=0.6, r=0)
      
      moving = get_actual_tcp_pose()
      moving[2] = 0
      movel(pose_add(moving, p[0,0,placement_side[2],0,0,0]))
      
      pcs_appr = placement_side
      movel(pose_add(pcs_appr, p[((-0.057*buffer_memory)),0,0, 0,0,0]), a=0.9, v=0.6, r=0)
      
      set_digital_out(1,False)
      sleep(3)
      
      movel(placement_side_config, a=0.9, v=0.6, r=0)
      movel(home_transfer, a=0.9, v=0.6, r=0)
    else:
      set_digital_out(1,False)
    end
      x = x + 1
      buffer_memory = buffer_memory + 1
  end
end
socket_close("cam_socket")
